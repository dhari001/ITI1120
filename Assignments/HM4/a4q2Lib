def eraseTable (tab):
   '''
   (list) -> None
   This function prepares the game table (array) 
   by putting '-' in all the elements.
   It does not create a new array
   Preconditions: tab is a reference to an nxn array matrice n x n that contains '-', 'X' or 'O'
   '''
   for i in range (len(tab)):                          #goes through each row
      for j in range (len(tab)):                       #goes through each column
         tab[i][j] = '-'                             #at each index of array 'tab' it replaces value with '-'

      
def verifyWin(tab):
   '''(list) ->  bool
   * Preconditions: tab is a reference to an nxn array that contains '-', 'X' or 'O'
    * Verify if there is a winner.
    * Look for 3 X's and O's in a row, column, and diagonal.
    * If we find one, we display the winner (the message "Player X has won" 
    * or "Player O has won!") and returns True.
    * If there is a draw (verify it with the function testdraw),
    * display "It is a draw" and returns True.
    * If the game is not over, returns False.
    * The function call the functions testrows, testCols, testDiags
    * pour verifier s'il y a un gagnant.
    * Those functions returns the winner 'X' or 'O', or '-' if there is no winner.
    '''
   conclusion = None #return value type nothing for now
   if testLignes(tab)== 'X':
      print("Player X has won")
      conclusion = True
   elif testCols(tab)== 'X':
      print("Player X has won")
      conclusion = True
   elif testDiags(tab) == 'X':
      print("Player X has won")
      conclusion = True
      #check if X is the winner
      
   elif testLignes(tab) ==  'O':
      print("Player O has won")
      conclusion = True
   elif testCols(tab) ==  'O':
      print("Player O has won")
      conclusion = True
   elif testDiags(tab) ==  'O':
      print("Player O has won")
      conclusion = True
      #check if O is the winner
      
   elif testDraw(tab) == True:
      print("It is a draw")
      conclusion = True
      #check for DRAW
      
   elif testLignes(tab) or testCols(tab) or testDiags(tab) ==  '-':
      conclusion = False
   return conclusion   
 
def testLignes(tab):
   ''' (list) ->  str
   * verify if there is a winning row.
   * Look for three 'X' or three 'O' in a row.  
   * If they are found, the character 'X' or 'O' is returned, otherwise '-' is returned.
   * Preconditions: tab is a reference to an nxn array that contains '-', 'X' or 'O'
   '''
   bingo_r_1 = tab[0][0] == tab[0][1] == tab[0][2] and tab[0][2] != '-'
   bingo_r_2 = tab[1][0] == tab[1][1] == tab[1][2] and tab[1][2] != '-'
   bingo_r_3 = tab[2][0] == tab[2][1] == tab[2][2] and tab[2][2] != '-'
   if bingo_r_1:
      return tab[0][0]
   elif bingo_r_2:
      return tab[1][0]
   elif bingo_r_3:
      return tab[2][0]
  
  
def testCols(tab):
   ''' (list) ->  str
   * verify a winning column.
   * look for three 'X' or three 'O' in a column.  
   * If it is the case the character 'X' or 'O' is returned, otherwise '-' is returned.
   * Preconditions: tab is a reference to an nxn array that contains '-', 'X' or 'O'
   '''

   bingo_c_1 = tab[0][0] == tab[1][0] == tab[2][0] != '-'
   bingo_c_2 = tab[0][1] == tab[1][1] == tab[2][1] != '-'
   bingo_c_3 = tab[0][2] == tab[1][2] == tab[2][2] != '-'
   if bingo_c_1:
      return tab[0][0]
   elif bingo_c_2:
      return tab[0][1]
   elif bingo_c_3:
      return tab[0][2]
      


def testDiags(tab):
   ''' (list) ->  str
   * Look for three 'X' or three 'O' in a diagonal.  
   * If it is the case, the character 'X' or 'O' is returned
   * otherwise '-' is returned.
   * Preconditions: tab is a reference to an nxn array that contains '-', 'X' or 'O'
   '''

   bingo_d_1 = tab[0][0] == tab[1][1] == tab[2][2] != '-'
   bingo_d_2 = tab[2][0] == tab[1][1] == tab[0][2] != '-'
   if bingo_d_1:
      return tab[0][0]
   elif bingo_d_2:
      return tab[2][0]
      


  
def testDraw(tab):
   for i in tab:
        for j in i:
            if j == '-':
                return False

   return True
   ''' (list) ->  bool
   * verify if there is a draw
   * check if all the array elements have X or O, not '-'.  
   * If we do not find find any '-' in the array, return True. 
   * If there is any '-', return false.
   * Preconditions: tab is a reference to an nxn array that contains '-', 'X' or 'O'
   '''

             
   

